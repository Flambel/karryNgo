{"version":3,"sources":["webpack:///src/app/layout/list-users/add-users.component.ts","webpack:///src/app/layout/list-users/add-users.component.html","webpack:///src/app/layout/list-users/change-role-users.component.ts","webpack:///src/app/layout/list-users/change-role-users.component.html","webpack:///src/app/layout/list-users/list-users-routing.module.ts","webpack:///src/app/layout/list-users/list-users.component.ts","webpack:///src/app/layout/list-users/list-users.component.html","webpack:///src/app/layout/list-users/list-users.module.ts"],"names":["AddEmpComponent","formBuilder","router","alertService","userService","empformlabel","empformbtn","btnvisibility","countries","routeReuseStrategy","shouldReuseRoute","addForm","group","_id","username","required","gender","country","email","phone","minLength","maxLength","empid","localStorage","getItem","getById","pipe","subscribe","dataget","patchValue","data","console","log","navigate","update","value","success","message","error","onCancel","selector","templateUrl","styleUrls","animations","ChangeRoleUserComponent","SetServiceRole","submitted","getAll","roles","role_data","role_id","userData","invalid","formulaire","user_id","f","editRole","controls","routes","path","component","children","ListUserRoutingModule","forChild","imports","exports","ListUserComponent","route","persons","currentUser","JSON","parse","loadAllUsers","id","suspension","unSuspension","personel","removeItem","setItem","toString","ListUserModule","declarations"],"mappings":"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","file":"list-users-list-users-module-es5.js","sourcesContent":["import { Component, OnInit } from '@angular/core';  \r\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";  \r\nimport { Router } from \"@angular/router\";  \r\n\r\n\r\nimport { first } from 'rxjs/operators';\r\nimport { routerTransition } from '../../router.animations';\r\nimport { UserService } from './../../_services/user.service';\r\nimport { AlertService } from './../../_services/alert.service';\r\n  \r\n@Component({  \r\n  selector: 'app-add-emp',  \r\n  templateUrl: './add-users.component.html',  \r\n  styleUrls: ['./add-users.component.scss'],\r\n  animations: [routerTransition()]  \r\n})  \r\nexport class AddEmpComponent implements OnInit {  \r\n  \r\n\r\n  empformlabel: string = 'Add User';  \r\n  empformbtn: string = 'Save';  \r\n\r\n  constructor(private formBuilder: FormBuilder, private router: Router, private alertService: AlertService,private userService: UserService) { \r\n\r\n      // override the route reuse strategy\r\n      this.router.routeReuseStrategy.shouldReuseRoute = function() {\r\n          return false;\r\n      }; \r\n  }  \r\n  \r\n  addForm: FormGroup;  \r\n  btnvisibility: boolean = true;  \r\n\r\n  countries = [{'id':'cameroon', 'name':'Cameroon'}, {'id':'south africa', 'name': 'South Africa'}, {'id':'great britain', 'name': 'UK'}, {'id':'usa', 'name': 'USA'}, {'id':'france', 'name': 'France'}];\r\n\r\n  ngOnInit() {  \r\n  \r\n    this.addForm = this.formBuilder.group({   \r\n      _id: [''],  \r\n      username: ['', Validators.required],  \r\n      gender: ['female', Validators.required],  \r\n      country: ['france', Validators.required],  \r\n      email: ['', [Validators.required, Validators.email]],  \r\n      phone: ['', [Validators.required, Validators.minLength(9),Validators.maxLength(9)]]  \r\n    });  \r\n\r\n      let empid = localStorage.getItem('editEmpId'); \r\n\r\n      if (empid) {  \r\n       \r\n       this.userService.getById(empid).pipe(first()).subscribe( (dataget : any)  => {  \r\n            this.addForm.patchValue(dataget.data); \r\n          });\r\n\r\n        this.btnvisibility = false;  \r\n        this.empformlabel = 'Edit User Infos';  \r\n        this.empformbtn = 'Update';  \r\n      }  \r\n \r\n  }  \r\n\r\n\r\n  onSubmit() {  \r\n    console.log('Create fire');  \r\n    //this.empService.createUser(this.addForm.value)  \r\n     // .subscribe(data => {  \r\n        //this.router.navigate(['/portal/list-emp']);  \r\n    //  },  \r\n     // error => {  \r\n     //   alert(error);  \r\n     // });  \r\n  }  \r\n\r\n  onCancel() { \r\n\r\n    this.router.navigate(['/portal/list-users']);\r\n  \r\n  }  \r\n\r\n  onUpdate() {  \r\n    \r\n    console.log('Update fire'); \r\n\r\n      this.userService.update(this.addForm.value).pipe(first()).subscribe(\r\n\r\n           //on success \r\n           (data : any) => { \r\n                this.alertService.success(data.message, true);\r\n                this.router.navigate(['/portal/list-users']); \r\n           },\r\n\r\n           //on error\r\n           error => {\r\n                console.log(error);\r\n                this.alertService.error(error);\r\n           },\r\n\r\n            //on complete\r\n           () => { \r\n              //this.router.navigate(['/portal/list-users']); \r\n           }); \r\n\r\n  }  \r\n\r\n}","<div [@routerTransition]>\r\n    <app-page-header [heading]=\"'Edit'\" [icon]=\"'fa-users'\"></app-page-header>\r\n    <div class=\"row\">\r\n        <div class=\"col-lg-12\">\r\n            <div class=\"card mb-3\">\r\n                <div class=\"card-header\">\r\n                \t <h2 class=\"text-center\">{{empformlabel}}</h2>  \r\n           \t\t\t\t<alert></alert>\r\n                </div>\r\n\r\n                <div class=\"col-md-10\">  \r\n      <form [formGroup]=\"addForm\" novalidate class=\"form\">    \r\n      \t\r\n      \t <input  name=\"_id\" type=\"hidden\" formControlName=\"_id\" >  \r\n        <div class=\"form-group\">  \r\n          <label for=\"USERNAME\">User Name:</label>  \r\n          <input formControlName=\"username\" placeholder=\"User Name\" name=\"USERNAME\" class=\"form-control\" id=\"USERNAME\">  \r\n          <div class=\"alert  alert-danger\" *ngIf=\"addForm.get('username').touched && addForm.get('username').hasError('required')\">  \r\n            User Name is required  \r\n          </div>  \r\n        </div>  \r\n      \r\n        <div class=\"form-group\">  \r\n          <label for=\"EMAIL\">Email:</label>  \r\n          <input formControlName=\"email\" placeholder=\"Email\" name=\"EMAIL\" class=\"form-control\" id=\"EMAIL\">  \r\n          <div class=\"alert  alert-danger\" *ngIf=\"addForm.get('email').hasError('email') && addForm.get('email').touched\">\r\n            Email is required and must be a valid email address.  \r\n          </div>  \r\n        </div>  \r\n\r\n        <div class=\"form-group\">  \r\n          <label for=\"TELEPHONE\">Phone:</label>  \r\n          <input formControlName=\"phone\" placeholder=\"Telephone Number\" name=\"TELEPHONE\" class=\"form-control\" id=\"TELEPHONE\">  \r\n          <div class=\"alert  alert-danger\" *ngIf=\"addForm.get('phone').hasError('maxlength') && addForm.get('phone').touched\">\r\n            Phone is required and should be equal to 9 digits.  \r\n          </div>  \r\n        </div>  \r\n      \r\n        <div class=\"form-group\">  \r\n          <label for=\"PAYS\">Country:</label>  \r\n\t        <select class=\"form-control\" formControlName=\"country\" name=\"PAYS\" id=\"PAYS\" >\r\n\t\t        <option [value]=\"\"></option>\r\n\t\t        <option *ngFor=\"let pays of countries\" [value]=\"pays.id\">{{pays.name}}</option>\r\n\t        </select>  \r\n          <div class=\"alert  alert-danger\" *ngIf=\"addForm.get('country').hasError('required') && addForm.get('country').touched || addForm.get('country').hasError('required') \">  \r\n            Country is required \r\n          </div> \r\n        </div> \r\n\r\n        <div class=\"row\">\r\n    <div class=\"form-group\">\r\n         <div class=\"radio\">\r\n            <label class=\"custom-control custom-radio\">\r\n                <input type=\"radio\" class=\"custom-control-input\"  name=\"gender\" formControlName=\"gender\" value=\"male\"><span class=\"custom-control-label\">Male</span>\r\n            </label>\r\n         </div>\r\n         <div class=\"radio\">\r\n            <label class=\"custom-control custom-radio\">\r\n                <input type=\"radio\" class=\"custom-control-input\" name=\"gender\" formControlName=\"gender\" value=\"female\"><span class=\"custom-control-label\">Female</span>\r\n            </label>\r\n        </div>\r\n    </div>\r\n</div>        \r\n\r\n<div class=\"row\">\r\n    <div class=\"form-group\">\r\n        <button class=\"btn btn-success mr-4\" [disabled]='addForm.invalid' *ngIf=\"btnvisibility\" (click)=\"onSubmit()\">Save</button>   \r\n        <button class=\"btn btn-success mr-4\" [disabled]='addForm.invalid' *ngIf=\"!btnvisibility\" (click)=\"onUpdate()\">Update</button> \r\n        <button class=\"btn btn-danger\" (click)=\"onCancel()\">Cancel</button> \r\n    </div>\r\n</div>\r\n\r\n         \r\n      \r\n        <!-- <p>Form value: {{ addForm.value | json }}</p>   -->\r\n      </form>  \r\n    </div>  \r\n   \r\n            </div> \r\n        </div>\r\n\r\n    </div>\r\n</div>\r\n    \r\n","import { Component, OnInit } from '@angular/core';  \r\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";  \r\nimport { Router } from \"@angular/router\";  \r\n\r\n\r\nimport { first } from 'rxjs/operators';\r\nimport { routerTransition } from '../../router.animations';\r\nimport { AlertService } from './../../_services/alert.service';\r\nimport { UserService } from './../../_services/user.service';\r\nimport { RoleService } from './../../_services/role.service';\r\n  \r\n@Component({  \r\n  selector: 'app-add-emp',  \r\n  templateUrl: './change-role-users.component.html',  \r\n  styleUrls: ['./change-role-users.component.scss'],\r\n  animations: [routerTransition()]  \r\n})  \r\nexport class ChangeRoleUserComponent implements OnInit {  \r\n  \r\n\r\n  empformlabel: string ;  \r\n  empformbtn: string ;  \r\n  role_data: any;\r\n  userData:any;\r\n\r\n  constructor(private SetServiceRole: RoleService,private formBuilder: FormBuilder, private router: Router, private alertService: AlertService,private userService: UserService) { \r\n\r\n      // override the route reuse strategy\r\n      this.router.routeReuseStrategy.shouldReuseRoute = function() {\r\n          return false;\r\n      }; \r\n  }  \r\n  \r\n  addForm: FormGroup;  \r\n  btnvisibility: boolean = true;  \r\n  submitted = false;\r\n\r\n  ngOnInit() {  \r\n\r\n    this.SetServiceRole.getAll().pipe(first()).subscribe(roles => { \r\n            this.role_data = roles; \r\n        }); \r\n\r\n      this.addForm = this.formBuilder.group({        \r\n      role_id: ['', Validators.required],      \r\n      _id: ['']       \r\n    });\r\n\r\n      let empid = localStorage.getItem('editEmpId'); \r\n\r\n      if (empid) {  \r\n       \r\n       this.userService.getById(empid).pipe(first()).subscribe( (dataget : any)  => {  \r\n            this.addForm.patchValue( {_id: dataget.data._id}); \r\n            this.userData=dataget;\r\n\r\n          });\r\n\r\n        this.btnvisibility = false;  \r\n        this.empformlabel = 'Edit User Role';  \r\n        this.empformbtn = 'Update';  \r\n      }  \r\n \r\n  }  \r\n\r\n// convenience getter for easy access to form fields\r\n    get f() { return this.addForm.controls; }\r\n\r\n  onCancel() { \r\n\r\n    this.router.navigate(['/portal/list-users']);\r\n  \r\n  }  \r\n\r\n  onUpdate() {  \r\n\r\n        this.submitted = true;\r\n\r\n        // stop here if form is invalid\r\n        if (this.addForm.invalid) {\r\n            return;\r\n        } \r\n        let formulaire: any = {\r\n          user_id: localStorage.getItem('editEmpId'),\r\n          role_id: this.f.role_id.value\r\n        };\r\n        console.log(' user_id'   +formulaire.user_id);\r\n        console.log(' role_id'   +formulaire.role_id);\r\nconsole.log(this.addForm.value);\r\n      this.SetServiceRole.editRole(formulaire).pipe(first()).subscribe(\r\n\r\n           //on success \r\n           (data : any) => { \r\n                this.alertService.success(data.message, true);\r\n                this.router.navigate(['/portal/list-users']); \r\n           },\r\n\r\n           //on error\r\n           error => {\r\n                console.log(error);\r\n                this.alertService.error(error);\r\n           },\r\n\r\n            //on complete\r\n           () => { \r\n              //this.router.navigate(['/portal/list-users']); \r\n           }); \r\n\r\n  }  \r\n\r\n}","<div [@routerTransition]>\r\n    <app-page-header [heading]=\"'Role Edit'\" [icon]=\"'fa-users'\"></app-page-header>\r\n    <div class=\"row\">\r\n        <div class=\"col-lg-12\">\r\n            <div class=\"card mb-3\">\r\n                <div class=\"card-header\">\r\n                \t <h2 class=\"text-center\">{{empformlabel}}</h2>  \r\n           \t\t\t\t<alert></alert>\r\n                </div>\r\n\r\n                <div class=\"col-md-10\">  \r\n      <form [formGroup]=\"addForm\" novalidate class=\"form\">    \r\n      \t\r\n      \t<input  name=\"_id\" type=\"hidden\" formControlName=\"_id\" >  \r\n\r\n        <div class=\"form-group\">  \r\n          <label for=\"USERNAME\">Current User Role: <span *ngIf=\"userData.data\" style=\"font-size: blue;font-weight: bold\">{{ userData.data.username }}</span></label>  \r\n          <p *ngIf=\"userData.data\" style=\"font-size: green;font-weight: bold\">{{ userData.data.title_role }} ({{ userData.data.slug_role }})</p>\r\n        </div>  \r\n      \r\n      \r\n        <div class=\"form-group\">  \r\n          <label for=\"role_id\">Role :</label>  \r\n\t        <select class=\"form-control\" formControlName=\"role_id\" name=\"role_id\" id=\"role_id\" [ngClass]=\"{ 'is-invalid': submitted && f.role_id.errors }\" >\r\n\t\t        <option [value]=\"\"></option>\r\n\t\t        <option *ngFor=\"let valueRole of role_data.data\" [value]=\"valueRole._id\">{{valueRole.title}}  ({{valueRole.slug}})</option>\r\n\t        </select> \r\n          <div *ngIf=\"submitted && f.role_id.errors\" class=\"invalid-feedback\">\r\n            <div *ngIf=\"f.role_id.errors.required\">Role is required</div>\r\n          </div> \r\n        </div> \r\n     \r\n\r\n<div class=\"row\">\r\n    <div class=\"form-group\"> \r\n        <button class=\"btn btn-success mr-4\" [disabled]='addForm.invalid' *ngIf=\"!btnvisibility\" (click)=\"onUpdate()\">Update</button> \r\n        <button class=\"btn btn-danger\" (click)=\"onCancel()\">Cancel</button> \r\n    </div>\r\n</div>\r\n\r\n         \r\n      \r\n        <!-- <p>Form value: {{ addForm.value | json }}</p>   -->\r\n      </form>  \r\n    </div>  \r\n   \r\n            </div> \r\n        </div>\r\n\r\n    </div>\r\n</div>\r\n    \r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ListUserComponent } from './list-users.component';\r\nimport { AddEmpComponent } from './add-users.component';  \r\nimport { ChangeRoleUserComponent } from './change-role-users.component';  \r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',component: ListUserComponent ,\r\n               children:  [{path: 'add-edit', component: AddEmpComponent},{path: 'role-edit', component: ChangeRoleUserComponent} ]\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class ListUserRoutingModule {}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { first } from 'rxjs/operators';\r\nimport { routerTransition } from '../../router.animations';\r\nimport { Router,ActivatedRoute } from '@angular/router';\r\n\r\nimport { RoleInfo } from './../../_models/role';\r\nimport { UserInfo } from './../../_models/user';\r\n\r\nimport { AlertService } from './../../_services/alert.service';\r\nimport { UserService } from './../../_services/user.service';\r\nimport { RoleService } from './../../_services/role.service';\r\n\r\n@Component({\r\n    selector: 'app-list-users',\r\n    templateUrl: './list-users.component.html',\r\n    styleUrls: ['./list-users.component.scss'],\r\n    animations: [routerTransition()]\r\n\r\n})\r\nexport class ListUserComponent implements OnInit { \r\n    \r\n    persons: UserInfo[] = [];\r\n\r\n    role_data: RoleInfo[] = [];\r\n\r\n    currentUser: UserInfo;\r\n\r\n    constructor(private SetServiceRole: RoleService,\r\n                private userService: UserService,\r\n                private alertService: AlertService,\r\n                public route: ActivatedRoute,\r\n                private router: Router) {\r\n\r\n        // override the route reuse strategy\r\n      this.router.routeReuseStrategy.shouldReuseRoute = function() {\r\n          return false;\r\n      };\r\n\r\n    \tthis.currentUser = JSON.parse(localStorage.getItem('currentUser'));\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.loadAllUsers();\r\n    }\r\n\r\n    deleteUser(id: number) {\r\n        this.userService.delete(id).pipe(first()).subscribe(\r\n\r\n           //on success \r\n           (data : any) => { \r\n                this.alertService.success(data.message, true);\r\n           },\r\n\r\n           //on error\r\n           error => {\r\n                this.alertService.error(error);\r\n           },\r\n\r\n            //on complete\r\n           () => { \r\n                this.loadAllUsers() \r\n           });\r\n    }\r\n\r\n//Cette fonction permet de suspendre un compte utilisateur\r\n    suspendUser(id: number) {\r\n        this.userService.suspension(id).pipe(first()).subscribe(\r\n\r\n           //on success \r\n           (data : any) => { \r\n                this.alertService.success(data.message, true);\r\n           },\r\n\r\n           //on error\r\n           error => {\r\n                this.alertService.error(error);\r\n           },\r\n\r\n            //on complete\r\n           () => { \r\n                this.loadAllUsers() \r\n           });\r\n    }\r\n    \r\n//Cette fonction permet de lever la suspension d'un compte utilisateur\r\n    unsuspendUser(id: number) {\r\n        this.userService.unSuspension(id).pipe(first()).subscribe(\r\n\r\n           //on success \r\n           (data : any) => { \r\n                this.alertService.success(data.message, true);\r\n           },\r\n\r\n           //on error\r\n           error => {\r\n                this.alertService.error(error);\r\n           },\r\n\r\n            //on complete\r\n           () => { \r\n                this.loadAllUsers() \r\n           });\r\n    }\r\n\r\n    editEmp(personel: UserInfo): void {  \r\n     // console.log(JSON.stringify(personel.toString()));\r\n      localStorage.removeItem('editEmpId');  \r\n      localStorage.setItem('editEmpId',personel.toString()); \r\n      this.router.navigate(['/portal/list-users/add-edit']);  \r\n   } \r\n\r\n   changeRole(personel: UserInfo): void {  \r\n      localStorage.removeItem('editEmpId');  \r\n      localStorage.setItem('editEmpId',personel.toString()); \r\n      this.router.navigate(['/portal/list-users/role-edit']);  \r\n   } \r\n\r\n    private loadAllUsers() {\r\n        this.userService.getAll().pipe(first()).subscribe((persons: any) => { \r\n            this.persons = persons.data; \r\n            console.log(persons.data); \r\n        });\r\n\r\n        this.SetServiceRole.getAll().pipe(first()).subscribe((roles: any) => { \r\n            this.role_data = roles.data; \r\n        });\r\n    }\r\n\r\n    // getRoleName(roleUserTitle:string,TabRole:any): string {      \r\n    //     let verified:boolean = false, i=0,VarName=\"\";\r\n    //     if (roleUserTitle && TabRole) {\r\n    //        while (!verified && i < TabRole.length ) {\r\n\r\n    //       if ( String(TabRole[i].title) == roleUserTitle){\r\n    //           VarName=TabRole[i].title+' ('+TabRole[i].slug+')';\r\n    //           verified=true;\r\n    //         }\r\n    //         i++;\r\n    //       }\r\n    //     } \r\n    //  return VarName;\r\n    // }\r\n\r\n\r\n}\r\n","<div [@routerTransition]>\r\n    <router-outlet></router-outlet>\r\n <div *ngIf=\"route.children.length === 0\">\r\n    <app-page-header [heading]=\"'Users'\" [icon]=\"'fa-users'\"></app-page-header>\r\n    <div class=\"row\">\r\n        <div class=\"col-lg-12\">\r\n            <div class=\"card mb-3\">\r\n                <div class=\"card-header\">\r\n                    <alert></alert>\r\n                    Users Lists : {{persons?.length}}\r\n                        <!-- <div *ngIf=\"arr && arr.length > 0\">\r\n                        {{arr[0].name}}\r\n                        </div> -->\r\n                    \r\n                </div>\r\n                <div class=\"card-body table-responsive\">\r\n                    <table class=\"table\">\r\n                        <thead>\r\n                        <tr>\r\n                            <th>#</th>\r\n                            <th>Username</th>\r\n                            <th>Role</th>\r\n                            <th>Email</th>\r\n                            <th>Sex</th>\r\n                            <th>Phone</th>\r\n                            <th>Country</th>\r\n                            <th>Action</th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        <tr *ngFor=\"let person of persons;let rank = index\">\r\n                            <td scope=\"row\">{{rank+1}}</td>\r\n                            <td>{{person.username}}</td>\r\n                            <!-- <td  style=\"color: blue;font-weight: bold\">{{ getRoleName(person.title_role,role_data) }}  </td> -->\r\n                            <td  style=\"color: blue;font-weight: bold\">{{ person.role_id }}  </td>\r\n                            <td>{{person.email}}</td>\r\n                            <td>{{person.gender}}</td>\r\n                            <td>{{person.phone}}</td>\r\n                            <td>{{person.suspended}}</td>\r\n                            <td>\r\n                                <button [disabled]=\"currentUser.user.title_role!='administrator'\" *ngIf=\"person.email!=currentUser.user.email\" (click)=\"changeRole(person._id)\" style=\"margin-right: 20px;\" class=\"btn btn-info\" style=\"margin-bottom: 2px;\"> {{person.title_role}}</button>\r\n                                <button *ngIf=\"person.email!=currentUser.user.email\" (click)=\"editEmp(person._id)\" style=\"margin-right: 20px;\" class=\"btn btn-info\" style=\"margin-bottom: 2px;\"> Edit</button>  \r\n                                <button *ngIf=\"person.email!=currentUser.user.email\" class=\"btn btn-danger\" (click)=\"deleteUser(person._id)\"  style=\"margin-bottom: 2px;\">Delete</button>\r\n                                <button *ngIf=\"person.email!=currentUser.user.email && person.suspended==false\" class=\"btn btn-success\" (click)=\"suspendUser(person._id)\"  style=\"margin-bottom: 2px;\">Suspend</button>\r\n                                <button *ngIf=\"person.email!=currentUser.user.email && person.suspended==true\" class=\"btn btn-warning\" (click)=\"unsuspendUser(person._id)\" >Unsuspend</button>\r\n                            </td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div> \r\n        </div>\r\n\r\n    </div>\r\n    </div>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule,FormsModule  }    from '@angular/forms';\r\nimport { ListUserRoutingModule } from './list-users-routing.module';\r\nimport { ListUserComponent } from './list-users.component';\r\nimport { PageHeaderModule } from './../../shared';\r\nimport { AlertModule } from './../../_directives/alert.module';\r\nimport { AddEmpComponent } from './add-users.component';  \r\nimport { ChangeRoleUserComponent } from './change-role-users.component';   \r\n\r\n@NgModule({\r\n    imports: [CommonModule, ListUserRoutingModule,ReactiveFormsModule,FormsModule,PageHeaderModule,AlertModule],\r\n    declarations: [ListUserComponent,AddEmpComponent,ChangeRoleUserComponent]\r\n})\r\nexport class ListUserModule {}\r\n"]}